{"ast":null,"code":"import { Html5QrcodeScanType, Html5QrcodeConstants } from \"../../core\";\nvar ScanTypeSelector = function () {\n  function ScanTypeSelector(supportedScanTypes) {\n    this.supportedScanTypes = this.validateAndReturnScanTypes(supportedScanTypes);\n  }\n  ScanTypeSelector.prototype.getDefaultScanType = function () {\n    return this.supportedScanTypes[0];\n  };\n  ScanTypeSelector.prototype.hasMoreThanOneScanType = function () {\n    return this.supportedScanTypes.length > 1;\n  };\n  ScanTypeSelector.prototype.isCameraScanRequired = function () {\n    for (var _i = 0, _a = this.supportedScanTypes; _i < _a.length; _i++) {\n      var scanType = _a[_i];\n      if (ScanTypeSelector.isCameraScanType(scanType)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  ScanTypeSelector.isCameraScanType = function (scanType) {\n    return scanType === Html5QrcodeScanType.SCAN_TYPE_CAMERA;\n  };\n  ScanTypeSelector.isFileScanType = function (scanType) {\n    return scanType === Html5QrcodeScanType.SCAN_TYPE_FILE;\n  };\n  ScanTypeSelector.prototype.validateAndReturnScanTypes = function (supportedScanTypes) {\n    if (!supportedScanTypes || supportedScanTypes.length === 0) {\n      return Html5QrcodeConstants.DEFAULT_SUPPORTED_SCAN_TYPE;\n    }\n    var maxExpectedValues = Html5QrcodeConstants.DEFAULT_SUPPORTED_SCAN_TYPE.length;\n    if (supportedScanTypes.length > maxExpectedValues) {\n      throw \"Max \".concat(maxExpectedValues, \" values expected for \") + \"supportedScanTypes\";\n    }\n    for (var _i = 0, supportedScanTypes_1 = supportedScanTypes; _i < supportedScanTypes_1.length; _i++) {\n      var scanType = supportedScanTypes_1[_i];\n      if (!Html5QrcodeConstants.DEFAULT_SUPPORTED_SCAN_TYPE.includes(scanType)) {\n        throw \"Unsupported scan type \".concat(scanType);\n      }\n    }\n    return supportedScanTypes;\n  };\n  return ScanTypeSelector;\n}();\nexport { ScanTypeSelector };","map":{"version":3,"sources":["../../../../src/ui/scanner/scan-type-selector.ts"],"names":[],"mappings":"AAUA,SACI,mBAAmB,EACnB,oBAAoB,QACjB,YAAY;AAGnB,IAAA,gBAAA,GAAA,YAAA;EAGI,SAAA,gBAAA,CAAY,kBAAoD,EAAA;IAC5D,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,0BAA0B,CACrD,kBAAkB,CAAC;EAC3B;EAMO,gBAAA,CAAA,SAAA,CAAA,kBAAkB,GAAzB,YAAA;IACI,OAAO,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;EACrC,CAAC;EAMM,gBAAA,CAAA,SAAA,CAAA,sBAAsB,GAA7B,YAAA;IACI,OAAO,IAAI,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC;EAC7C,CAAC;EAGM,gBAAA,CAAA,SAAA,CAAA,oBAAoB,GAA3B,YAAA;IACI,KAAuB,IAAA,EAAA,GAAA,CAAuB,EAAvB,EAAA,GAAA,IAAI,CAAC,kBAAkB,EAAvB,EAAA,GAAA,EAAA,CAAA,MAAuB,EAAvB,EAAA,EAAuB,EAAE;MAA3C,IAAM,QAAQ,GAAA,EAAA,CAAA,EAAA,CAAA;MACf,IAAI,gBAAgB,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE;QAC7C,OAAO,IAAI;MACd;IACJ;IACD,OAAO,KAAK;EAChB,CAAC;EAGa,gBAAA,CAAA,gBAAgB,GAA9B,UAA+B,QAA6B,EAAA;IACxD,OAAO,QAAQ,KAAK,mBAAmB,CAAC,gBAAgB;EAC5D,CAAC;EAGa,gBAAA,CAAA,cAAc,GAA5B,UAA6B,QAA6B,EAAA;IACtD,OAAO,QAAQ,KAAK,mBAAmB,CAAC,cAAc;EAC1D,CAAC;EAQO,gBAAA,CAAA,SAAA,CAAA,0BAA0B,GAAlC,UACI,kBAA8C,EAAA;IAG9C,IAAI,CAAC,kBAAkB,IAAI,kBAAkB,CAAC,MAAM,KAAK,CAAC,EAAE;MACxD,OAAO,oBAAoB,CAAC,2BAA2B;IAC1D;IAGD,IAAI,iBAAiB,GACf,oBAAoB,CAAC,2BAA2B,CAAC,MAAM;IAC7D,IAAI,kBAAkB,CAAC,MAAM,GAAG,iBAAiB,EAAE;MAC/C,MAAM,MAAA,CAAA,MAAA,CAAO,iBAAiB,EAAA,uBAAA,CAAuB,GAC/C,oBAAoB;IAC7B;IAGD,KAAuB,IAAA,EAAA,GAAA,CAAkB,EAAlB,oBAAA,GAAA,kBAAkB,EAAlB,EAAA,GAAA,oBAAA,CAAA,MAAkB,EAAlB,EAAA,EAAkB,EAAE;MAAtC,IAAM,QAAQ,GAAA,oBAAA,CAAA,EAAA,CAAA;MACf,IAAI,CAAC,oBAAoB,CAAC,2BAA2B,CAC5C,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACzB,MAAM,wBAAA,CAAA,MAAA,CAAyB,QAAQ,CAAE;MAC5C;IACJ;IAED,OAAO,kBAAkB;EAC7B,CAAC;EAEL,OAAA,gBAAC;AAAD,CAAC,CAAA,CAAA","sourceRoot":"","sourcesContent":["import { Html5QrcodeScanType, Html5QrcodeConstants } from \"../../core\";\nvar ScanTypeSelector = (function () {\n    function ScanTypeSelector(supportedScanTypes) {\n        this.supportedScanTypes = this.validateAndReturnScanTypes(supportedScanTypes);\n    }\n    ScanTypeSelector.prototype.getDefaultScanType = function () {\n        return this.supportedScanTypes[0];\n    };\n    ScanTypeSelector.prototype.hasMoreThanOneScanType = function () {\n        return this.supportedScanTypes.length > 1;\n    };\n    ScanTypeSelector.prototype.isCameraScanRequired = function () {\n        for (var _i = 0, _a = this.supportedScanTypes; _i < _a.length; _i++) {\n            var scanType = _a[_i];\n            if (ScanTypeSelector.isCameraScanType(scanType)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    ScanTypeSelector.isCameraScanType = function (scanType) {\n        return scanType === Html5QrcodeScanType.SCAN_TYPE_CAMERA;\n    };\n    ScanTypeSelector.isFileScanType = function (scanType) {\n        return scanType === Html5QrcodeScanType.SCAN_TYPE_FILE;\n    };\n    ScanTypeSelector.prototype.validateAndReturnScanTypes = function (supportedScanTypes) {\n        if (!supportedScanTypes || supportedScanTypes.length === 0) {\n            return Html5QrcodeConstants.DEFAULT_SUPPORTED_SCAN_TYPE;\n        }\n        var maxExpectedValues = Html5QrcodeConstants.DEFAULT_SUPPORTED_SCAN_TYPE.length;\n        if (supportedScanTypes.length > maxExpectedValues) {\n            throw \"Max \".concat(maxExpectedValues, \" values expected for \")\n                + \"supportedScanTypes\";\n        }\n        for (var _i = 0, supportedScanTypes_1 = supportedScanTypes; _i < supportedScanTypes_1.length; _i++) {\n            var scanType = supportedScanTypes_1[_i];\n            if (!Html5QrcodeConstants.DEFAULT_SUPPORTED_SCAN_TYPE\n                .includes(scanType)) {\n                throw \"Unsupported scan type \".concat(scanType);\n            }\n        }\n        return supportedScanTypes;\n    };\n    return ScanTypeSelector;\n}());\nexport { ScanTypeSelector };\n//# sourceMappingURL=scan-type-selector.js.map"]},"metadata":{},"sourceType":"module"}