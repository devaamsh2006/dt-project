{"ast":null,"code":"// QR code detection using native BarcodeDetector API when available\nconst detectQRCode = async imageData => {\n  try {\n    // Check if BarcodeDetector is available\n    if ('BarcodeDetector' in window) {\n      const barcodeDetector = new window.BarcodeDetector({\n        formats: ['qr_code']\n      });\n      const codes = await barcodeDetector.detect(imageData);\n      if (codes.length > 0) {\n        return codes[0].rawValue;\n      }\n    } else {\n      // Fallback to a basic image processing approach\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n\n      // Draw the image data\n      canvas.width = imageData.width;\n      canvas.height = imageData.height;\n      context.putImageData(imageData, 0, 0);\n\n      // For now, we'll return null as we don't have a fallback QR detection\n      // In a production environment, you'd want to use a JS-based QR library\n      return null;\n    }\n  } catch (error) {\n    console.error('QR detection error:', error);\n    return null;\n  }\n  return null;\n};\nexport { detectQRCode };","map":{"version":3,"names":["detectQRCode","imageData","window","barcodeDetector","BarcodeDetector","formats","codes","detect","length","rawValue","canvas","document","createElement","context","getContext","width","height","putImageData","error","console"],"sources":["C:/Users/default.LAPTOP-PTJLTSGT/OneDrive/Documents/dt/canteen-management/src/utils/qrDetector.js"],"sourcesContent":["// QR code detection using native BarcodeDetector API when available\nconst detectQRCode = async (imageData) => {\n  try {\n    // Check if BarcodeDetector is available\n    if ('BarcodeDetector' in window) {\n      const barcodeDetector = new window.BarcodeDetector({\n        formats: ['qr_code']\n      });\n\n      const codes = await barcodeDetector.detect(imageData);\n      if (codes.length > 0) {\n        return codes[0].rawValue;\n      }\n    } else {\n      // Fallback to a basic image processing approach\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      \n      // Draw the image data\n      canvas.width = imageData.width;\n      canvas.height = imageData.height;\n      context.putImageData(imageData, 0, 0);\n      \n      // For now, we'll return null as we don't have a fallback QR detection\n      // In a production environment, you'd want to use a JS-based QR library\n      return null;\n    }\n  } catch (error) {\n    console.error('QR detection error:', error);\n    return null;\n  }\n  return null;\n};\n\nexport { detectQRCode };\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,MAAOC,SAAS,IAAK;EACxC,IAAI;IACF;IACA,IAAI,iBAAiB,IAAIC,MAAM,EAAE;MAC/B,MAAMC,eAAe,GAAG,IAAID,MAAM,CAACE,eAAe,CAAC;QACjDC,OAAO,EAAE,CAAC,SAAS;MACrB,CAAC,CAAC;MAEF,MAAMC,KAAK,GAAG,MAAMH,eAAe,CAACI,MAAM,CAACN,SAAS,CAAC;MACrD,IAAIK,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;QACpB,OAAOF,KAAK,CAAC,CAAC,CAAC,CAACG,QAAQ;MAC1B;IACF,CAAC,MAAM;MACL;MACA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/C,MAAMC,OAAO,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;;MAEvC;MACAJ,MAAM,CAACK,KAAK,GAAGd,SAAS,CAACc,KAAK;MAC9BL,MAAM,CAACM,MAAM,GAAGf,SAAS,CAACe,MAAM;MAChCH,OAAO,CAACI,YAAY,CAAChB,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;;MAErC;MACA;MACA,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO,IAAI;EACb;EACA,OAAO,IAAI;AACb,CAAC;AAED,SAASlB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module"}