{"ast":null,"code":"// QR code detection using native BarcodeDetector API when available\nconst detectQRCode = async imageData => {\n  try {\n    // Check if BarcodeDetector is available\n    if ('BarcodeDetector' in window) {\n      const barcodeDetector = new window.BarcodeDetector({\n        formats: ['qr_code']\n      });\n      const codes = await barcodeDetector.detect(imageData);\n      if (codes.length > 0) {\n        return codes[0].rawValue;\n      }\n    }\n\n    // If BarcodeDetector is not available or no QR code was found,\n    // we'll try a simpler approach to extract text from the image\n    // This is a basic implementation and may not work for all QR codes\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n\n    // Draw the image data\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    context.putImageData(imageData, 0, 0);\n\n    // Try to find high contrast areas that might be QR code data\n    const pixels = context.getImageData(0, 0, canvas.width, canvas.height).data;\n    let total = 0;\n    for (let i = 0; i < pixels.length; i += 4) {\n      const r = pixels[i];\n      const g = pixels[i + 1];\n      const b = pixels[i + 2];\n      // Convert to grayscale\n      total += (r + g + b) / 3;\n    }\n\n    // If the image has very high contrast (lots of black and white),\n    // it might be a QR code. This is a very basic heuristic.\n    const average = total / (pixels.length / 4);\n    if (average < 128) {\n      // This might be a QR code, but we can't decode it\n      // Return null to indicate no QR code was found\n      return null;\n    }\n  } catch (error) {\n    console.error('QR detection error:', error);\n  }\n  return null;\n};\nexport { detectQRCode };","map":{"version":3,"names":["detectQRCode","imageData","window","barcodeDetector","BarcodeDetector","formats","codes","detect","length","rawValue","canvas","document","createElement","context","getContext","width","height","putImageData","pixels","getImageData","data","total","i","r","g","b","average","error","console"],"sources":["C:/Users/default.LAPTOP-PTJLTSGT/OneDrive/Documents/dt/canteen-management/src/utils/qrDetector.js"],"sourcesContent":["// QR code detection using native BarcodeDetector API when available\nconst detectQRCode = async (imageData) => {\n  try {\n    // Check if BarcodeDetector is available\n    if ('BarcodeDetector' in window) {\n      const barcodeDetector = new window.BarcodeDetector({\n        formats: ['qr_code']\n      });\n\n      const codes = await barcodeDetector.detect(imageData);\n      if (codes.length > 0) {\n        return codes[0].rawValue;\n      }\n    }\n\n    // If BarcodeDetector is not available or no QR code was found,\n    // we'll try a simpler approach to extract text from the image\n    // This is a basic implementation and may not work for all QR codes\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    \n    // Draw the image data\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    context.putImageData(imageData, 0, 0);\n    \n    // Try to find high contrast areas that might be QR code data\n    const pixels = context.getImageData(0, 0, canvas.width, canvas.height).data;\n    let total = 0;\n    for (let i = 0; i < pixels.length; i += 4) {\n      const r = pixels[i];\n      const g = pixels[i + 1];\n      const b = pixels[i + 2];\n      // Convert to grayscale\n      total += (r + g + b) / 3;\n    }\n    \n    // If the image has very high contrast (lots of black and white),\n    // it might be a QR code. This is a very basic heuristic.\n    const average = total / (pixels.length / 4);\n    if (average < 128) {\n      // This might be a QR code, but we can't decode it\n      // Return null to indicate no QR code was found\n      return null;\n    }\n  } catch (error) {\n    console.error('QR detection error:', error);\n  }\n  return null;\n};\n\nexport { detectQRCode };\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,MAAOC,SAAS,IAAK;EACxC,IAAI;IACF;IACA,IAAI,iBAAiB,IAAIC,MAAM,EAAE;MAC/B,MAAMC,eAAe,GAAG,IAAID,MAAM,CAACE,eAAe,CAAC;QACjDC,OAAO,EAAE,CAAC,SAAS;MACrB,CAAC,CAAC;MAEF,MAAMC,KAAK,GAAG,MAAMH,eAAe,CAACI,MAAM,CAACN,SAAS,CAAC;MACrD,IAAIK,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;QACpB,OAAOF,KAAK,CAAC,CAAC,CAAC,CAACG,QAAQ;MAC1B;IACF;;IAEA;IACA;IACA;IACA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC/C,MAAMC,OAAO,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;;IAEvC;IACAJ,MAAM,CAACK,KAAK,GAAGd,SAAS,CAACc,KAAK;IAC9BL,MAAM,CAACM,MAAM,GAAGf,SAAS,CAACe,MAAM;IAChCH,OAAO,CAACI,YAAY,CAAChB,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;;IAErC;IACA,MAAMiB,MAAM,GAAGL,OAAO,CAACM,YAAY,CAAC,CAAC,EAAE,CAAC,EAAET,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC,CAACI,IAAI;IAC3E,IAAIC,KAAK,GAAG,CAAC;IACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,CAACV,MAAM,EAAEc,CAAC,IAAI,CAAC,EAAE;MACzC,MAAMC,CAAC,GAAGL,MAAM,CAACI,CAAC,CAAC;MACnB,MAAME,CAAC,GAAGN,MAAM,CAACI,CAAC,GAAG,CAAC,CAAC;MACvB,MAAMG,CAAC,GAAGP,MAAM,CAACI,CAAC,GAAG,CAAC,CAAC;MACvB;MACAD,KAAK,IAAI,CAACE,CAAC,GAAGC,CAAC,GAAGC,CAAC,IAAI,CAAC;IAC1B;;IAEA;IACA;IACA,MAAMC,OAAO,GAAGL,KAAK,IAAIH,MAAM,CAACV,MAAM,GAAG,CAAC,CAAC;IAC3C,IAAIkB,OAAO,GAAG,GAAG,EAAE;MACjB;MACA;MACA,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;EAC7C;EACA,OAAO,IAAI;AACb,CAAC;AAED,SAAS3B,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module"}