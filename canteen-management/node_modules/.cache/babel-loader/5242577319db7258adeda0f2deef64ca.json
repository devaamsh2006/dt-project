{"ast":null,"code":"// QR code detection using ZXing library\nconst detectQRCode = async imageData => {\n  try {\n    // Load the ZXing library dynamically\n    const ZXing = await import('https://cdn.jsdelivr.net/npm/@zxing/library@0.19.1/umd/index.min.js');\n    const hints = new Map();\n    const reader = new ZXing.BrowserQRCodeReader();\n\n    // Convert ImageData to HTMLImageElement\n    const canvas = document.createElement('canvas');\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    const ctx = canvas.getContext('2d');\n    ctx.putImageData(imageData, 0, 0);\n\n    // Create a Uint8Array from the canvas\n    const imageBytes = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n\n    // Create a ZXing compatible bitmap\n    const bitmap = new ZXing.HTMLCanvasElementLuminanceSource(canvas);\n    const binarizer = new ZXing.HybridBinarizer(bitmap);\n    const binBitmap = new ZXing.BinaryBitmap(binarizer);\n\n    // Decode the QR code\n    const result = reader.decode(binBitmap, hints);\n    return result.text;\n  } catch (error) {\n    return null;\n  }\n};\nexport { detectQRCode };","map":{"version":3,"names":["detectQRCode","imageData","ZXing","hints","Map","reader","BrowserQRCodeReader","canvas","document","createElement","width","height","ctx","getContext","putImageData","imageBytes","getImageData","data","bitmap","HTMLCanvasElementLuminanceSource","binarizer","HybridBinarizer","binBitmap","BinaryBitmap","result","decode","text","error"],"sources":["C:/Users/default.LAPTOP-PTJLTSGT/OneDrive/Documents/dt/canteen-management/src/utils/qrDetector.js"],"sourcesContent":["// QR code detection using ZXing library\nconst detectQRCode = async (imageData) => {\n  try {\n    // Load the ZXing library dynamically\n    const ZXing = await import('https://cdn.jsdelivr.net/npm/@zxing/library@0.19.1/umd/index.min.js');\n    const hints = new Map();\n    const reader = new ZXing.BrowserQRCodeReader();\n    \n    // Convert ImageData to HTMLImageElement\n    const canvas = document.createElement('canvas');\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    const ctx = canvas.getContext('2d');\n    ctx.putImageData(imageData, 0, 0);\n    \n    // Create a Uint8Array from the canvas\n    const imageBytes = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n    \n    // Create a ZXing compatible bitmap\n    const bitmap = new ZXing.HTMLCanvasElementLuminanceSource(canvas);\n    const binarizer = new ZXing.HybridBinarizer(bitmap);\n    const binBitmap = new ZXing.BinaryBitmap(binarizer);\n    \n    // Decode the QR code\n    const result = reader.decode(binBitmap, hints);\n    return result.text;\n  } catch (error) {\n    return null;\n  }\n};\n\nexport { detectQRCode };\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,MAAOC,SAAS,IAAK;EACxC,IAAI;IACF;IACA,MAAMC,KAAK,GAAG,MAAM,MAAM,CAAC,qEAAqE,CAAC;IACjG,MAAMC,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;IACvB,MAAMC,MAAM,GAAG,IAAIH,KAAK,CAACI,mBAAmB,CAAC,CAAC;;IAE9C;IACA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC/CF,MAAM,CAACG,KAAK,GAAGT,SAAS,CAACS,KAAK;IAC9BH,MAAM,CAACI,MAAM,GAAGV,SAAS,CAACU,MAAM;IAChC,MAAMC,GAAG,GAAGL,MAAM,CAACM,UAAU,CAAC,IAAI,CAAC;IACnCD,GAAG,CAACE,YAAY,CAACb,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;;IAEjC;IACA,MAAMc,UAAU,GAAGH,GAAG,CAACI,YAAY,CAAC,CAAC,EAAE,CAAC,EAAET,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACI,MAAM,CAAC,CAACM,IAAI;;IAE3E;IACA,MAAMC,MAAM,GAAG,IAAIhB,KAAK,CAACiB,gCAAgC,CAACZ,MAAM,CAAC;IACjE,MAAMa,SAAS,GAAG,IAAIlB,KAAK,CAACmB,eAAe,CAACH,MAAM,CAAC;IACnD,MAAMI,SAAS,GAAG,IAAIpB,KAAK,CAACqB,YAAY,CAACH,SAAS,CAAC;;IAEnD;IACA,MAAMI,MAAM,GAAGnB,MAAM,CAACoB,MAAM,CAACH,SAAS,EAAEnB,KAAK,CAAC;IAC9C,OAAOqB,MAAM,CAACE,IAAI;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO,IAAI;EACb;AACF,CAAC;AAED,SAAS3B,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module"}